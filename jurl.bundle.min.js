class App {
  constructor(root) {
    (this.root = root),
      this.cutAppsContentWhileItLoads(),
      (this.components = {}),
      (this.instanciatedComponents = []);
  }
  init() {
    this.defineComponentsName(Component, "app-main"),
      (this.mainComponent = this.createComponent("<app-main></app-main>")),
      this.root.appendChild(this.mainComponent),
      cloneAttributes(this.mainComponent, this.root),
      this.root.replaceWith(this.mainComponent),
      (this.mainComponent.shadowRoot.innerHTML =
        "<span>" + this.content + "</span>"),
      this.mainComponent.setRoot(this.mainComponent.shadowRoot.children[0]);
  }
  cutAppsContentWhileItLoads() {
    (this.content = this.root.innerHTML), (this.root.innerHTML = "");
  }
  getAndLoadScripts(nameOfHTML, elem) {
    elem.querySelectorAll(" script").forEach((script) => {
      var newScript = document.createElement("script");
      (newScript.innerHTML = script.innerHTML),
        script.src && (newScript.src = script.src),
        newScript.setAttribute("belongs_to", nameOfHTML),
        newScript.classList.add("script_" + nameOfHTML),
        document.head.appendChild(newScript);
    }),
      elem.querySelectorAll(" script").forEach((k) => k.remove());
  }
  createComponent(txt) {
    return new DOMParser().parseFromString(txt, "text/html").body.children[0];
  }
  async loadManyComponents(arr) {
    var co,
      arrOfPromises = [];
    for (co of arr) arrOfPromises.push(this.loadComponent(co));
    return await Promise.all(arrOfPromises), 1;
  }
  getComponentsNameFromJSClass(elem) {
    try {
      var scriptString = elem.querySelector("script").innerHTML.trim(),
        numOfCharWhereClass = scriptString.indexOf("class ");
      return scriptString
        .substring(numOfCharWhereClass + "class ".length, scriptString.length)
        .split(" extends ")[0];
    } catch (e) {
      app.throwError(e);
    }
  }
  throwError(e) {
    console.error(e);
  }
  async loadComponent(html) {
    var html = await (
        await fetch(html + "?fd=" + 99999 * Math.random())
      ).text(),
      elem = document.createElement("html"),
      html = ((elem.innerHTML = html), this.getComponentsNameFromJSClass(elem)),
      style =
        (this.getAndLoadScripts(html, elem),
        (
          elem.querySelector("head style") || document.createElement("style")
        ).cloneNode(!0));
    return (
      (this.components[html] = {
        html: elem.querySelector("body").innerHTML,
        css: style,
      }),
      1
    );
  }
  defineComponentsName(classs, name) {
    customElements.define(
      name || convertStringToComponentFriendlyName(classs.name),
      classs
    );
  }
}
class Component extends HTMLElement {
  constructor() {
    super(),
      (this.uid = Math.floor(1e16 * Math.random()).toString(24)),
      this.setAttribute("uid", this.uid),
      (this.state = {});
    var nameOfClassThatCalledThis = this.constructor.name;
    this.attachShadow({ mode: "open" }),
      (this.shadowRoot.innerHTML =
        (app.components[nameOfClassThatCalledThis] || {}).html || ""),
      (this.shadowRoot.componentReference = this);
    try {
      var stylePart = app.components[nameOfClassThatCalledThis].css.cloneNode(
        !0
      );
      stylePart.setAttribute("original-style", 1),
        this.shadowRoot.append(stylePart);
    } catch (e) {}
    this.shadowRoot.append(document.createElement("template")),
      app.instanciatedComponents.push(this),
      this.setRootElement(),
      this.initObsrever(),
      this.enable(),
      this.updateParsedAttributes();
  }
  enable() {
    this.enabled ||
      (this.root && this.shadowRoot.appendChild(this.root),
      this.setState("enabled", !0),
      (this.style.display = this.prevDisplayValue || ""),
      (this.enabled = !0));
  }
  disable() {
    this.enabled &&
      ((this.prevDisplayValue =
        "none" != this.style.display ? this.style.display : ""),
      this.root && this.$("template").content.appendChild(this.root),
      this.setState("enabled", !1),
      (this.enabled = !1),
      (this.style.display = "none"));
  }
  linkJAttrsWithState() {
    this.root &&
      this.root.querySelectorAll(":host *").forEach((el) => {
        var jAttr;
        for (jAttr of getAttributesStartingWith(el, "j-"))
          jAttr.name.startsWith("j-on") ||
            "j-innerhtml" == jAttr.name.toLowerCase() ||
            (el[jAttr.name.substr(2, 999)] = evalInComponent(
              jAttr.value,
              this
            ));
      });
  }
  linkJEventsWithMethods() {
    this.root &&
      this.root.querySelectorAll(":host *").forEach((el) => {
        var jAttr;
        for (jAttr of getAttributesStartingWith(el, "j-on")) {
          var methodInClass = jAttr.value;
          el[jAttr.name.substr(2, 999)] = this[methodInClass].bind(this);
        }
      });
  }
  updateJInnerHTML() {
    this.root &&
      this.root
        .querySelectorAll(":host *[j-innerHTML]:not(:has(> *))")
        .forEach((el) => {
          var updatedVal = evalInComponent(
            el.getAttribute("j-innerHTML").trim().toLowerCase(),
            this
          );
          el.innerHTML != updatedVal && (el.innerHTML = updatedVal);
        });
  }
  setState(varName, val) {
    val instanceof Object && (val = encodeAttr(val)),
      this.setAttribute(varName, val);
  }
  getState(varName) {
    return (this.state || {})[varName.toLowerCase()];
  }
  setCSSVariable(varName, val) {
    val instanceof Object && (val = encodeAttr(val)),
      this.style.setProperty("--" + varName, val);
  }
  getCSSVariable(varName) {
    let elem = this;
    for (; elem && !elem.style.getPropertyValue("--" + varName); )
      elem = elem.getParentComponent();
    var value;
    return elem && elem.style.getPropertyValue("--" + varName)
      ? ((value = elem.style.getPropertyValue("--" + varName)),
        decodeAttr(value) || value)
      : null;
  }
  getParentComponent() {
    if (this.parent) return this.parent;
    let obj = this;
    for (; obj.parentNode; ) obj = obj.parentNode;
    var parent = obj.componentReference;
    return parent instanceof JURL.Component && (this.parent = parent), parent;
  }
  setRootElement() {
    var constructorsNameElement = this.$(this.constructor.name.toLowerCase());
    (this.root = constructorsNameElement),
      this.root || (this.root = this.$(":host >*:not(style):not(template)"));
  }
  passStatesToVars() {
    var key;
    for (key of Object.keys(this.state)) this[key] = this.state[key];
  }
  updateParsedAttributes() {
    (this.prevState = JSON.parse(JSON.stringify(this.state || {}))),
      (this.state = {});
    let parent = this.getParentComponent();
    this.observer.disconnect(),
      Array.from(this.attributes).map((k) => {
        let decodedAttr = decodeAttr(k.value),
          trimmedValue = k.value.trim();
        if (trimmedValue.endsWith("}}") && trimmedValue.startsWith("{{")) {
          let val = removeCurlyBrackets(trimmedValue).toLowerCase(),
            strToEval = "parent.state." + val,
            i = this.getAttribute("i");
          try {
            let parentsVal = eval(strToEval);
            this.state[k.name] = parentsVal;
          } catch (e) {
            this.state[k.name] = parent ? (parent.state || {})[val] : void 0;
          }
        } else if (decodedAttr) this.state[k.name] = decodedAttr;
        else if ("style" != k.name)
          if ("enabled" == k.name) {
            let value = !(0 < k.value.length) || JSON.parse(k.value);
            (this.state[k.name] = value),
              value ? this.enable() : this.disable();
          } else this.state[k.name] = k.value;
      }),
      this.linkJEventsWithMethods(),
      this.linkJAttrsWithState(),
      this.updateJInnerHTML(),
      this.observer.observe(this, this.observerConfig);
  }
  getAllChildrenComponents() {
    return Array.from(this.root.querySelectorAll("*")).filter(
      (k) => k instanceof JURL.Component
    );
  }
  getAllElements() {
    return Array.from(
      this.shadowRoot.querySelectorAll(":host > *:not(template):not(style)")
    );
  }
  checkWhatAttributesChanged() {
    var p,
      ret = {},
      parsedAttrKeys = Object.keys(this.state),
      prevParsedAttrKeys = Object.keys(this.prevState);
    for (p of parsedAttrKeys) {
      var current = this.state[p],
        prev = this.prevState[p];
      JSON.stringify(current) != JSON.stringify(prev) &&
        (ret[p] = { prev: prev, current: current });
    }
    for (let p of prevParsedAttrKeys)
      if (!ret[p]) {
        let current = this.state[p],
          prev = this.prevState[p];
        JSON.stringify(current) != JSON.stringify(prev) &&
          (ret[p] = { prev: prev, current: current });
      }
    return ret;
  }
  updateIfTagsInThisComponent() {
    this.shadowRoot.querySelectorAll("j-if").forEach((k) => k.update());
  }
  update() {
    this.updateParsedAttributes();
    var attrs = this.checkWhatAttributesChanged();
    if ((this.updateIfTagsInThisComponent(), 0 != Object.keys(attrs).length)) {
      if (this.onChange instanceof Function)
        try {
          this.onChange(attrs);
        } catch (e) {
          console.warn(e);
        }
      for (var c of this.getAllChildrenComponents())
        c.update instanceof Function && c.isEnabled() && c.update();
    }
  }
  handleOnChange(mutationList) {
    for (const mutation of mutationList)
      "childList" !== mutation.type &&
        "attributes" === mutation.type &&
        this.update();
  }
  initObsrever() {
    (this.observerConfig = { attributes: !0, childList: !1, subtree: !1 }),
      (this.observer = new MutationObserver((e) => this.handleOnChange(e))),
      this.observer.observe(this, this.observerConfig);
  }
  setRoot(el) {
    this.root = el;
  }
  replaceCurlyBracketsWithContent() {
    if (this.root) {
      var elementsWithNoChildrenAndCurlyBracketsContent = Array.from(
        this.root.querySelectorAll(":host *:not(style)")
      ).filter(
        (el) => 0 == el.childElementCount && -1 < el.innerText.indexOf("{{")
      );
      if (0 != elementsWithNoChildrenAndCurlyBracketsContent.length)
        for (var el of elementsWithNoChildrenAndCurlyBracketsContent) {
          if (el.parentNode instanceof JURL.ForTag) return;
          var whereAreTheCurlyBrStarting = el.innerText.indexOf("{{"),
            whereAreTheCurlyBrEnding = el.innerText.indexOf("}}"),
            whereAreTheCurlyBrEnding = el.innerText.substr(
              whereAreTheCurlyBrStarting + 2,
              whereAreTheCurlyBrEnding - whereAreTheCurlyBrStarting - 2
            ),
            whereAreTheCurlyBrStarting =
              this.state[whereAreTheCurlyBrEnding.toLowerCase()];
          el.innerText = el.innerText.replace(
            "{{" + whereAreTheCurlyBrEnding + "}}",
            whereAreTheCurlyBrStarting
          );
        }
    }
  }
  connectedCallback() {
    setTimeout(() => {
      if (
        (this.updateParsedAttributes(),
        this.replaceCurlyBracketsWithContent(),
        this.onInit instanceof Function)
      )
        try {
          this.onInit();
        } catch (e) {
          console.warn(e);
        }
    }, 1);
  }
  disconnectedCallback() {
    this.observer.disconnect(),
      (app.instanciatedComponents = app.instanciatedComponents.filter(
        (k) => k.getAttribute("uid") != this.getAttribute("uid")
      )),
      this.onDestroy instanceof Function && this.onDestroy();
  }
  $(sel) {
    sel = this.shadowRoot.querySelectorAll(sel);
    return 1 < sel.length ? Array.from(sel) : 1 == sel.length ? sel[0] : null;
  }
  isEnabled() {
    return this.getState("enabled");
  }
  static create(attrs) {
    var key,
      elem = app.createComponent(
        "<" + convertStringToComponentFriendlyName(this.name) + " />"
      );
    if (attrs instanceof Object)
      for (key of Object.keys(attrs)) {
        let value = attrs[key];
        value instanceof Object && (value = encodeAttr(value)),
          elem.setAttribute(key, value);
      }
    return elem;
  }
}
class ForTag extends JURL.Component {
  constructor() {
    super(!0), (this.root = this.shadowRoot);
  }
  onInit() {
    console.log("# on init for"),
      ((window.forT = this).originalContent = duplicate(this.innerHTML)),
      this.copyStylesFromParent(),
      this.executeForFunctionality();
  }
  copyStylesFromParent() {
    var style,
      parent = this.getParentComponent();
    parent &&
      !this.$("style[belongs-to-parent='" + parent.uid + "'") &&
      (style = parent.$("style")) &&
      3 < (style.innerHTML || "").length &&
      ((style = style.cloneNode(!0)).setAttribute(
        "belongs-to-parent",
        parent.uid
      ),
      style.removeAttribute("original-style"),
      this.shadowRoot.appendChild(style));
  }
  onChange(e) {
    console.log("on change for", e), e.arr && this.executeForFunctionality();
  }
  executeForFunctionality() {
    var arr = this.getState("arr");
    this.getState("item");
    if (Array.isArray(arr)) {
      var currentChildren = this.getAllElements();
      if (arr.length == currentChildren.length)
        console.log("%%% SAME LENGTH"), this.update();
      else if (arr.length < currentChildren.length) {
        console.log("%%% GOTTA TAKE OUT");
        var childrenToRemove = currentChildren.splice(
          arr.length,
          currentChildren.length
        );
        console.log("childrenToRemove", childrenToRemove),
          childrenToRemove.forEach((k) => this.root.removeChild(k)),
          this.update();
      } else if (arr.length > currentChildren.length) {
        console.log("%%% GOTTA ADD", arr.length, currentChildren.length);
        var numberOfChildrenToAdd = arr.length - currentChildren.length;
        for (let i = 0; i < numberOfChildrenToAdd; i++) {
          var elem = app.createComponent(this.originalContent);
          elem.setAttribute("i", currentChildren.length + i),
            this.root.appendChild(elem);
        }
        this.update();
      } else
        0 == arr.length &&
          (console.log("%%% GOTTA REMOVE EM ALL"), (this.root.innerHTML = ""));
      this.updateJInnerHTML(), this.replaceCurlyBracketsWithContent();
    }
  }
  updateJInnerHTML() {
    this.root &&
      this.root
        .querySelectorAll(":host *[j-innerHTML]:not(:has(> *))")
        .forEach((el) => {
          let val = el.getAttribute("j-innerHTML").trim().toLowerCase(),
            i = el.getAttribute("i");
          if (-1 < val.indexOf("{{") && -1 < val.indexOf("}}")) {
            let newValWithNoCurly = removeCurlyBrackets(val),
              valueOfForProcessing;
            try {
              valueOfForProcessing = eval("this.state." + newValWithNoCurly);
            } catch (e) {}
            el.innerHTML = valueOfForProcessing;
          } else {
            let updatedVal = this.getState(val) || "";
            el.innerHTML != updatedVal && (el.innerHTML = updatedVal);
          }
        });
  }
  replaceCurlyBracketsWithContent() {
    if (this.root) {
      let elementsWithNoChildrenAndCurlyBracketsContent = Array.from(
        this.root.querySelectorAll(":host *:not(style)")
      ).filter(
        (el) => 0 == el.childElementCount && -1 < el.innerText.indexOf("{{")
      );
      if (0 != elementsWithNoChildrenAndCurlyBracketsContent.length)
        for (var el of elementsWithNoChildrenAndCurlyBracketsContent) {
          let whereAreTheCurlyBrStarting = el.innerText.indexOf("{{"),
            whereAreTheCurlyBrEnding = el.innerText.indexOf("}}");
          if (
            -1 == whereAreTheCurlyBrStarting ||
            -1 == whereAreTheCurlyBrEnding
          )
            return;
          let varInsideCurlyBr = el.innerText.substr(
              whereAreTheCurlyBrStarting + 2,
              whereAreTheCurlyBrEnding - whereAreTheCurlyBrStarting - 2
            ),
            i = el.getAttribute("i"),
            valueOfForProcessing;
          try {
            valueOfForProcessing = eval("this.state." + varInsideCurlyBr);
          } catch (e) {
            valueOfForProcessing = void 0;
          }
          el.innerText = el.innerText.replace(
            "{{" + varInsideCurlyBr + "}}",
            valueOfForProcessing
          );
        }
    }
  }
}
customElements.define("j-for", ForTag);
class IfTag extends HTMLElement {
  static get observedAttributes() {
    return ["condition"];
  }
  constructor() {
    super(), (window.ifCompo = this);
  }
  connectedCallback() {
    (this.savedOuterHTML = this.outerHTML), this.update();
  }
  attributeChangedCallback(name, oldValue, newValue) {
    this.update();
  }
  update() {
    var parentComponent = this.getParentComponent(),
      condition = this.getAttribute("condition");
    if (1 < condition.length && parentComponent) {
      var condition = condition.trim().split("()"),
        removePrethesisFromString = condition[0];
      if (1 == condition.length) {
        let stateInParent = parentComponent.getState(removePrethesisFromString);
        setTimeout(() => this.handleConditionChanged(stateInParent), 1);
      } else {
        condition = parentComponent[removePrethesisFromString];
        if (condition instanceof Function) {
          let resultOfConditionFunction = condition.bind(parentComponent)();
          setTimeout(
            () => this.handleConditionChanged(resultOfConditionFunction),
            1
          );
        }
      }
    }
  }
  handleConditionChanged(conditionValue) {
    this.style.display = conditionValue ? "" : "none";
  }
  getParentComponent() {
    let obj = this;
    for (; obj.parentNode; ) obj = obj.parentNode;
    return obj.componentReference;
  }
}
customElements.define("j-if", IfTag);
class RouterComponent extends JURL.Component {
  constructor() {
    super(),
      this.selectADivAndMakeItVisible(),
      (window.onpopstate = () => this.selectADivAndMakeItVisible()),
      this.getAllChildrenComponents().forEach((k) => {
        k.setState("routerdata", "{{routerdata}}");
      });
  }
  hideAllElements() {
    this.$(":host > *:not(style) > *").map((k) => {
      try {
        k.disable();
      } catch (e) {}
    });
  }
  selectADivAndMakeItVisible() {
    (this.selectedElement = this.$(
      "*[route='" + window.location.pathname + "']"
    )),
      !this.selectedElement && window.location.pathname.endsWith("/")
        ? (this.selectedElement = this.$(
            "*[route='" +
              window.location.pathname.substr(
                0,
                window.location.pathname.length - 1
              ) +
              "']"
          ))
        : this.selectedElement ||
          window.location.pathname.endsWith("/") ||
          (this.selectedElement = this.$(
            "*[route='" + window.location.pathname + "/"
          )),
      this.hideAllElements(),
      this.selectedElement instanceof JURL.Component &&
        this.selectedElement.enable();
  }
  navigate = (pathname, data) => {
    this.setState("routerdata", data),
      window.history.pushState({}, pathname, window.location.origin + pathname),
      this.selectADivAndMakeItVisible();
  };
}
function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
const randomColor = () =>
    "#" + Math.floor(16777215 * Math.random()).toString(16),
  encodeAttr = (str) => escape(JSON.stringify(str)),
  decodeAttr = (str) => {
    let ret;
    try {
      ret = JSON.parse(unescape(str));
    } catch (e) {
      ret = null;
    }
    return ret;
  };
async function getDataFromAPI(url) {
  return await (await fetch(url)).json();
}
function getAttributesStartingWith(el, str) {
  return Array.from(el.attributes).filter((k) => k.name.startsWith(str));
}
function convertStringToComponentFriendlyName(str) {
  return (
    "app-" +
    str
      .toLowerCase()
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
      .replace("_", "-")
  );
}
function removeCurlyBrackets(str) {
  return str.replace("{{", "").replace("}}", "");
}
function cloneAttributes(target, source) {
  [...source.attributes].forEach((attr) => {
    target.setAttribute(attr.nodeName, attr.nodeValue);
  });
}
function duplicate(obj) {
  return JSON.parse(JSON.stringify(obj));
}
function moveAllChildrenNodes(oldParent, newParent) {
  for (; oldParent.childNodes.length; )
    newParent.appendChild(oldParent.firstChild);
}
function hasCurlyBrackets(val) {
  return -1 < val.indexOf("{{") && -1 < val.indexOf("}}");
}
function evalInComponent(value, compo) {
  let updatedVal;
  if (hasCurlyBrackets(value)) {
    let newValWithNoCurly = removeCurlyBrackets(value);
    try {
      updatedVal = eval("compo.state." + newValWithNoCurly);
    } catch (e) {}
  } else updatedVal = compo.getState(value) || "";
  return updatedVal;
}
