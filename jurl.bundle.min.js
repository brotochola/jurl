function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
(window.JURL = {
  ...(window.JURL || {}),
  App: class App {
    constructor(options) {
      if (JURL.instance) return JURL.instance;
      (this.log = []),
        Object.assign(this, options),
        this.root || this.throwError("the app was initialized without root"),
        this.cutAppsContentWhileItLoads(),
        (this.components = {}),
        (this.instanciatedComponents = []),
        ((JURL.instance = this).DOMparser = new DOMParser());
    }
    getTreeOfComponents(simple, showState) {
      return createTree(this.root, simple, showState);
    }
    getFlattenedHTML() {
      return sanitizeHtmlString(this.root.root.getInnerHTML());
    }
    init() {
      this.defineComponentsName(JURL.Component, "app-main"),
        (this.mainComponent = this.createComponent("<app-main></app-main>")),
        this.root.appendChild(this.mainComponent),
        cloneAttributes(this.mainComponent, this.root),
        this.root.replaceWith(this.mainComponent),
        (this.mainComponent.shadowRoot.innerHTML =
          "<span>" + this.content + "</span>"),
        this.mainComponent.setRoot(this.mainComponent.shadowRoot.children[0]),
        (this.root = this.mainComponent);
    }
    cutAppsContentWhileItLoads() {
      (this.content = this.root.innerHTML), (this.root.innerHTML = "");
    }
    getAndLoadScripts(nameOfHTML, elem) {
      elem.querySelectorAll(" script").forEach((script) => {
        var newScript = document.createElement("script");
        (newScript.innerHTML = script.innerHTML),
          script.src && (newScript.src = script.src),
          newScript.setAttribute("belongs_to", nameOfHTML),
          newScript.classList.add("script_" + nameOfHTML),
          document.head.appendChild(newScript);
      }),
        elem.querySelectorAll(" script").forEach((k) => k.remove());
    }
    createComponent(txt) {
      return this.DOMparser.parseFromString(txt, "text/html").body.children[0];
    }
    async loadManyComponents(arr) {
      var co,
        arrOfPromises = [];
      for (co of arr) arrOfPromises.push(this.loadComponent(co));
      try {
        return await Promise.all(arrOfPromises), 1;
      } catch (e) {
        return console.warn(e), 0;
      }
    }
    getComponentsNameFromJSClass(elem) {
      try {
        var scriptString = elem.querySelector("script").innerHTML.trim(),
          numOfCharWhereClass = scriptString.indexOf("class ");
        return scriptString
          .substring(numOfCharWhereClass + "class ".length, scriptString.length)
          .split(" extends ")[0];
      } catch (e) {
        this.throwError(e);
      }
    }
    throwError(e) {
      console.error(e);
    }
    getComponentFromURL(url) {
      var arr = Object.keys(this.components)
        .map((key) => this.components[key])
        .filter((c) => c.path == url);
      if (0 < arr.length) return arr[0];
    }
    async loadComponent(html) {
      if (!this.getComponentFromURL(html)) {
        let req;
        try {
          req = await fetch(html + "?fd=" + 99999 * Math.random());
        } catch (e) {
          return console.warn(e), 0;
        }
        var style,
          content = await req.text(),
          elem = document.createElement("html"),
          content =
            ((elem.innerHTML = content),
            this.getComponentsNameFromJSClass(elem));
        this.components[content]
          ? console.warn("the component " + content + " was already loaded")
          : (this.getAndLoadScripts(content, elem),
            (style = (
              elem.querySelector("head style") ||
              document.createElement("style")
            ).cloneNode(!0)),
            (this.components[content] = {
              html: elem.querySelector("body").innerHTML,
              css: style,
              path: html,
            }),
            this.checkIfTheresAnyComponentsToBeInitiallizedAfterLoaded(
              content
            ));
      }
      return 1;
    }
    checkIfTheresAnyComponentsToBeInitiallizedAfterLoaded(name) {
      let classNameOfNewCompo = eval(name),
        arr = this.instanciatedComponents.filter(
          (k) => k instanceof classNameOfNewCompo
        );
      0 < arr.length && (arr[0].outerHTML += " ");
    }
    defineComponentsName(classs, name) {
      customElements.define(
        name || convertStringToComponentFriendlyName(classs.name),
        classs
      );
    }
  },
}),
  (window.JURL = {
    ...(window.JURL || {}),
    Component: class Component extends HTMLElement {
      constructor() {
        super(),
          (this.uid = Math.floor(1e16 * Math.random()).toString(24)),
          this.setAttribute("uid", this.uid),
          (this.state = {});
        var nameOfClassThatCalledThis = this.constructor.name;
        this.attachShadow({ mode: "open" }),
          (this.shadowRoot.innerHTML =
            (JURL.instance.components[nameOfClassThatCalledThis] || {}).html ||
            ""),
          (this.shadowRoot.componentReference = this);
        try {
          var stylePart = JURL.instance.components[
            nameOfClassThatCalledThis
          ].css.cloneNode(!0);
          stylePart.setAttribute("original-style", 1),
            this.shadowRoot.append(stylePart);
        } catch (e) {}
        this.shadowRoot.append(document.createElement("template")),
          this.setRootElement(),
          this.initObserver(),
          this.enable(),
          this.updateParsedAttributes();
      }
      enable() {
        this.enabled ||
          (this.root && this.shadowRoot.appendChild(this.root),
          this.setState("enabled", !0),
          (this.style.display = this.prevDisplayValue || ""),
          (this.enabled = !0),
          this.onEnable());
      }
      onEnable() {}
      onDisabled() {}
      disable() {
        this.enabled &&
          ((this.prevDisplayValue =
            "none" != this.style.display ? this.style.display : ""),
          this.root && this.$("template").content.appendChild(this.root),
          this.setState("enabled", !1),
          (this.enabled = !1),
          (this.style.display = "none"),
          this.onDisabled());
      }
      getTree(hideComponent, showState) {
        return createTree(this, hideComponent, showState);
      }
      setState(varName, val) {
        let newVal = val;
        val instanceof Object
          ? (newVal = encodeAttr(val))
          : null == val && (newVal = 0);
        val = camelToSnake(varName);
        this.getAttribute(val) != newVal && this.setAttribute(val, newVal);
      }
      getState(varName) {
        return (this.state || {})[varName.trim()];
      }
      setCSSVariable(varName, val) {
        val instanceof Object && (val = encodeAttr(val)),
          this.style.setProperty("--" + varName, val);
      }
      getCSSVariable(varName) {
        let elem = this;
        for (; elem && !elem.style.getPropertyValue("--" + varName); )
          elem = elem.getParentComponent();
        var value;
        return elem && elem.style.getPropertyValue("--" + varName)
          ? ((value = elem.style.getPropertyValue("--" + varName)),
            decodeAttr(value) || value)
          : null;
      }
      getParentComponent() {
        if (this.parent) return this.parent;
        let obj = this;
        for (; obj.parentNode; ) obj = obj.parentNode;
        var parent = obj.componentReference;
        return (
          parent instanceof JURL.Component && (this.parent = parent), parent
        );
      }
      setRootElement() {
        var constructorsNameElement = this.$(
          this.constructor.name.toLowerCase()
        );
        (this.root = constructorsNameElement),
          this.root ||
            (this.root = this.$(":host >*:not(style):not(template)"));
      }
      passStatesToVars() {
        var key;
        for (key of Object.keys(this.state)) this[key] = this.state[key];
      }
      updateParsedAttributes() {
        (this.prevState = JSON.parse(JSON.stringify(this.state || {}))),
          (this.state = {}),
          this.observer.disconnect(),
          Array.from(this.attributes).map((k) => {
            var camelCaseAttrName = snakeToCamel(k.name),
              decodedAttr = decodeAttr(k.value);
            if (hasCurlyBrackets(k.value.trim())) {
              var parent = this.getParentComponent(),
                i = this.getAttribute("i");
              parent &&
                (this.state[camelCaseAttrName] = evalInComponent(
                  k.value,
                  parent,
                  i
                ));
            } else if (decodedAttr) this.state[camelCaseAttrName] = decodedAttr;
            else if ("style" != camelCaseAttrName)
              if ("enabled" == camelCaseAttrName) {
                parent = !(0 < k.value.length) || JSON.parse(k.value);
                (this.state[camelCaseAttrName] = parent)
                  ? this.enable()
                  : this.disable();
              } else
                try {
                  this.state[camelCaseAttrName] = JSON.parse(k.value);
                } catch (e) {
                  this.state[camelCaseAttrName] = k.value;
                }
          }),
          this.linkJAttrsOfAllElements(),
          this.observer.observe(this, this.observerConfig);
      }
      linkJAttrsOfAllElements() {
        this.root &&
          this.root.querySelectorAll(":host *").forEach((el) => {
            var jAttr,
              i = el.getAttribute("i");
            for (jAttr of getAttributesStartingWith(el, "j-")) {
              var updatedVal = evalInComponent(jAttr.value, this, i),
                nameOfAttr = jAttr.name.substr(2, 999);
              "innerhtml" == nameOfAttr.toLowerCase()
                ? el.innerHTML !== updatedVal && (el.innerHTML = updatedVal)
                : el[nameOfAttr] !== updatedVal &&
                  (el[nameOfAttr] = updatedVal);
            }
          });
      }
      getAllChildrenComponents() {
        return this.root
          ? Array.from(this.root.querySelectorAll("*")).filter(
              (k) => k instanceof JURL.Component
            )
          : [];
      }
      getAllElements() {
        return Array.from(
          this.shadowRoot.querySelectorAll(":host > *:not(template):not(style)")
        );
      }
      checkWhatAttributesChanged() {
        var p,
          ret = {},
          parsedAttrKeys = Object.keys(this.state),
          prevParsedAttrKeys = Object.keys(this.prevState);
        for (p of parsedAttrKeys) {
          var current = this.state[p],
            prev = this.prevState[p];
          JSON.stringify(current) != JSON.stringify(prev) &&
            (ret[p] = { prev: prev, current: current });
        }
        for (let p of prevParsedAttrKeys)
          if (!ret[p]) {
            let current = this.state[p],
              prev = this.prevState[p];
            JSON.stringify(current) != JSON.stringify(prev) &&
              (ret[p] = { prev: prev, current: current });
          }
        return ret;
      }
      updateIfTagsInThisComponent() {
        this.shadowRoot.querySelectorAll("j-if").forEach((k) => k.update());
      }
      saveLog(attrs) {
        JURL.instance.log || (JURL.instance.log = []),
          JURL.instance.log.push({
            type: this.constructor.name,
            id: this.uid,
            attrs: attrs,
            when: performance.now(),
          });
      }
      update() {
        this.updateParsedAttributes();
        var attrs = this.checkWhatAttributesChanged();
        if (
          (this.updateIfTagsInThisComponent(), 0 != Object.keys(attrs).length)
        ) {
          if (
            (JURL.instance.saveLog && this.saveLog(attrs),
            this.onChange instanceof Function)
          )
            try {
              this.onChange(attrs);
            } catch (e) {
              console.warn(e);
            }
          for (var c of this.getAllChildrenComponents())
            c.update instanceof Function && c.isEnabled() && c.update();
        }
      }
      handleOnChange(mutationList) {
        for (const mutation of mutationList)
          "childList" !== mutation.type &&
            "attributes" === mutation.type &&
            this.update();
      }
      initObserver() {
        (this.observerConfig = { attributes: !0, childList: !1, subtree: !1 }),
          (this.observer = new MutationObserver((e) => this.handleOnChange(e))),
          this.observer.observe(this, this.observerConfig);
      }
      setRoot(el) {
        this.root = el;
      }
      replaceCurlyBracketsWithContent() {
        if (this.root) {
          var elementsWithNoChildrenAndCurlyBracketsContent = Array.from(
            this.root.querySelectorAll(":host *:not(style)")
          ).filter(
            (el) => 0 == el.childElementCount && -1 < el.innerText.indexOf("{{")
          );
          if (0 != elementsWithNoChildrenAndCurlyBracketsContent.length)
            for (var el of elementsWithNoChildrenAndCurlyBracketsContent) {
              if (el.parentNode instanceof JURL.ForTag) return;
              var whereAreTheCurlyBrStarting = el.innerText.indexOf("{{"),
                whereAreTheCurlyBrEnding = el.innerText.indexOf("}}"),
                whereAreTheCurlyBrEnding = el.innerText.substr(
                  whereAreTheCurlyBrStarting + 2,
                  whereAreTheCurlyBrEnding - whereAreTheCurlyBrStarting - 2
                ),
                whereAreTheCurlyBrStarting = this.getState(
                  whereAreTheCurlyBrEnding
                );
              el.innerText = el.innerText.replace(
                "{{" + whereAreTheCurlyBrEnding + "}}",
                whereAreTheCurlyBrStarting
              );
            }
        }
      }
      connectedCallback() {
        JURL.instance.instanciatedComponents.push(this),
          setTimeout(() => {
            if (
              (this.updateParsedAttributes(), this.onInit instanceof Function)
            )
              try {
                this.onInit();
              } catch (e) {
                console.warn(e);
              }
          }, 1);
      }
      disconnectedCallback() {
        this.observer.disconnect(),
          (JURL.instance.instanciatedComponents =
            JURL.instance.instanciatedComponents.filter(
              (k) => k.getAttribute("uid") != this.getAttribute("uid")
            )),
          this.onDestroy instanceof Function && this.onDestroy();
      }
      $(sel) {
        sel = this.shadowRoot.querySelectorAll(sel);
        return 1 < sel.length
          ? Array.from(sel)
          : 1 == sel.length
          ? sel[0]
          : null;
      }
      isEnabled() {
        return this.getState("enabled");
      }
      static create(attrs) {
        var key,
          elem = JURL.instance.createComponent(
            "<" + convertStringToComponentFriendlyName(this.name) + " />"
          );
        if (attrs instanceof Object)
          for (key of Object.keys(attrs)) {
            let value = attrs[key];
            value instanceof Object && (value = encodeAttr(value)),
              elem.setAttribute(key, value);
          }
        return elem;
      }
    },
  }),
  (window.JURL = {
    ...(window.JURL || {}),
    DebugTag: class DebugTag extends JURL.Component {
      constructor() {
        super(),
          (this.root = this.shadowRoot),
          (this.preElement = document.createElement("pre")),
          this.shadowRoot.appendChild(this.preElement);
      }
      onInit() {
        this.update();
      }
      update() {
        this.preElement.innerHTML = JSON.stringify(
          evalInComponent(this.innerHTML, this.getParentComponent()),
          null,
          2
        );
      }
    },
  }),
  customElements.define("j-debug", JURL.DebugTag),
  (window.JURL = {
    ...(window.JURL || {}),
    ForTag: class ForTag extends JURL.Component {
      constructor() {
        super(!0), (this.root = this.shadowRoot);
      }
      onInit() {
        this.originalContent ||
          (this.originalContent = duplicate(this.innerHTML)),
          this.copyStylesFromParent(),
          this.executeForFunctionality(),
          (this.innerHTML = "");
      }
      copyStylesFromParent() {
        var style,
          parent = this.getParentComponent();
        parent &&
          !this.$("style[belongs-to-parent='" + parent.uid + "'") &&
          (style = parent.$("style")) &&
          3 < (style.innerHTML || "").length &&
          ((style = style.cloneNode(!0)).setAttribute(
            "belongs-to-parent",
            parent.uid
          ),
          style.removeAttribute("original-style"),
          this.shadowRoot.appendChild(style));
      }
      onChange(e) {
        e.arr && this.executeForFunctionality();
      }
      executeForFunctionality() {
        var arr = this.getState("arr");
        this.getState("item");
        if (Array.isArray(arr)) {
          var currentChildren = this.getAllElements();
          if (arr.length == currentChildren.length) this.update();
          else if (arr.length < currentChildren.length)
            currentChildren
              .splice(arr.length, currentChildren.length)
              .forEach((k) => this.root.removeChild(k)),
              this.update();
          else if (arr.length > currentChildren.length) {
            if (this.originalContent) {
              var numberOfChildrenToAdd = arr.length - currentChildren.length;
              for (let i = 0; i < numberOfChildrenToAdd; i++) {
                var elem = JURL.instance.createComponent(this.originalContent);
                elem.setAttribute("i", currentChildren.length + i),
                  this.root.appendChild(elem);
              }
              this.update();
            }
          } else 0 == arr.length && (this.root.innerHTML = "");
        }
      }
    },
  }),
  customElements.define("j-for", JURL.ForTag),
  (window.JURL = {
    ...(window.JURL || {}),
    IfTag: class IfTag extends HTMLElement {
      static get observedAttributes() {
        return ["condition"];
      }
      constructor() {
        super(), (window.ifCompo = this);
      }
      connectedCallback() {
        (this.savedOuterHTML = this.outerHTML), this.update();
      }
      attributeChangedCallback(name, oldValue, newValue) {
        this.update();
      }
      update() {
        var parentComponent = this.getParentComponent(),
          condition = this.getAttribute("condition"),
          i = this.getAttribute("i");
        1 < condition.length &&
          parentComponent &&
          ((condition = evalInComponent(condition, parentComponent, i)),
          this.handleConditionChanged(condition));
      }
      handleConditionChanged(conditionValue) {
        this.style.display = conditionValue ? "" : "none";
      }
      getParentComponent() {
        let obj = this;
        for (; obj.parentNode; ) obj = obj.parentNode;
        return obj.componentReference;
      }
    },
  }),
  customElements.define("j-if", JURL.IfTag),
  (window.JURL = {
    ...(window.JURL || {}),
    RouterComponent: class RouterComponent extends JURL.Component {
      constructor() {
        super(),
          this.selectADivAndMakeItVisible(),
          this.putRouterDataInAllChildren(),
          (window.onpopstate = () => this.selectADivAndMakeItVisible());
      }
      putRouterDataInAllChildren() {
        this.root.querySelectorAll("*:not(style)").forEach((k) => {
          k.setAttribute("router_data", "{{state.routerData}}");
        });
      }
      hideAllElementsExceptForTheSelectedElement() {
        this.$(
          ":host > *:not(style) > *:not([route='" +
            window.location.pathname +
            "'])"
        ).map((k) => {
          try {
            k.disable();
          } catch (e) {}
        });
      }
      getSelectedElement() {
        var doesItHaveSlashAtTheEnd = window.location.pathname.endsWith("/");
        let el;
        return (el = doesItHaveSlashAtTheEnd
          ? ((doesItHaveSlashAtTheEnd = removeLastCharacter(
              window.location.pathname
            )),
            (el = this.$("*[route='" + window.location.pathname + "']")) ||
              this.$("*route='" + doesItHaveSlashAtTheEnd + "']"))
          : (el = this.$("*[route='" + window.location.pathname + "']")) ||
            this.$("*[route='" + window.location.pathname + "/']"));
      }
      selectADivAndMakeItVisible() {
        var tempSelectedElement = this.getSelectedElement();
        this.selectedElement != tempSelectedElement &&
          ((this.selectedElement = tempSelectedElement),
          this.hideAllElementsExceptForTheSelectedElement(),
          this.selectedElement instanceof JURL.Component) &&
          this.selectedElement.enable();
      }
      navigate = (pathname, data) => {
        console.log("navigate", pathname, data),
          this.setState("routerData", data),
          window.history.pushState(
            {},
            pathname,
            window.location.origin + pathname
          ),
          this.selectADivAndMakeItVisible();
      };
    },
  });
const randomColor = () =>
    "#" + Math.floor(16777215 * Math.random()).toString(16),
  encodeAttr = (str) => escape(JSON.stringify(str)),
  decodeAttr = (str) => {
    let ret;
    try {
      ret = JSON.parse(unescape(str));
    } catch (e) {
      ret = null;
    }
    return ret;
  };
async function getDataFromAPI(url) {
  return await (await fetch(url)).json();
}
function getAttributesStartingWith(el, str) {
  return Array.from(el.attributes).filter((k) => k.name.startsWith(str));
}
function replaceAll(string, search, replace) {
  return string.split(search).join(replace);
}
function convertStringToComponentFriendlyName(str) {
  return "app-" + replaceAll(str, "_", "-").toLowerCase();
}
function removeCurlyBrackets(str) {
  return str.trim().replace("{{", "").replace("}}", "");
}
function cloneAttributes(target, source) {
  [...source.attributes].forEach((attr) => {
    target.setAttribute(attr.nodeName, attr.nodeValue);
  });
}
function duplicate(obj) {
  return JSON.parse(JSON.stringify(obj));
}
function moveAllChildrenNodes(oldParent, newParent) {
  for (; oldParent.childNodes.length; )
    newParent.appendChild(oldParent.firstChild);
}
function hasCurlyBrackets(val) {
  return val.trim().startsWith("{{") && -1 < val.trim().endsWith("}}");
}
function evalInComponent(value, compo, i) {
  let updatedVal;
  if (!(-1 < value.indexOf("[i]") && null == i)) {
    if (hasCurlyBrackets(value)) {
      let newValWithNoCurly = removeCurlyBrackets(value),
        stringToBeEvalled = "compo." + newValWithNoCurly,
        evalled;
      try {
        evalled = eval(stringToBeEvalled);
      } catch (e) {}
      if (evalled instanceof Function) updatedVal = evalled.bind(compo);
      else if (evalled instanceof Object || "string" == typeof evalled)
        updatedVal = evalled;
      else
        try {
          updatedVal = eval(
            "(function(){ return " + stringToBeEvalled + " })"
          ).bind(compo)();
        } catch (e) {
          try {
            updatedVal = eval(
              "(function(){return " + newValWithNoCurly + ";} ) .bind(compo)"
            )();
          } catch (e) {}
        }
      return updatedVal;
    }
    return compo.getState(value);
  }
}
function createTree(component, hideComponent, showState) {
  var tree = { id: component.uid, tagName: component.tagName, children: [] },
    component =
      (hideComponent || (tree.component = component),
      showState && (tree.state = component.state),
      component.getAllChildrenComponents());
  for (const childComponent of component) {
    var childTree = createTree(childComponent, hideComponent, showState);
    tree.children.push(childTree);
  }
  return tree;
}
function flattenWebComponents(component) {
  var tree = {
    children: [],
    tagName: component.tagName,
    html: removeHTMLComments((component.shadowRoot || {}).innerHTML || ""),
  };
  for (const childComponent of component.getAllChildrenComponents()) {
    var childTree = flattenWebComponents(childComponent);
    tree.children.push(childTree);
  }
  return tree;
}
function buildInnerHTML(tree) {
  if (!tree || !tree.html) return "";
  let innerHTML = tree.html;
  if (tree.children && 0 < tree.children.length)
    for (const child of tree.children) {
      var childHTML = buildInnerHTML(child),
        tagPlaceholder = `<${child.tagName}></${child.tagName}>`;
      innerHTML = innerHTML.replace(tagPlaceholder, childHTML);
    }
  return innerHTML;
}
function removeHTMLComments(str) {
  return str.replace(/<\!--.*?-->/g, "");
}
function sanitizeHtmlString(inputString) {
  const entityMap = {
    "&lt;": "<",
    "&gt;": ">",
    "&amp;": "&",
    "&quot;": '"',
    "&#x27;": "'",
    "&#x60;": "`",
    "&#x3C;": "<",
  };
  return inputString
    .replace(/&(lt|gt|amp|quot|#x27|#x60|#x3C);/g, function (match) {
      return entityMap[match];
    })
    .replace(/[^\x20-\x7E]/g, "");
}
function compareObjects(obj1, obj2) {
  return JSON.stringify(obj1) == JSON.stringify(obj2);
}
function removeLastCharacter(txt) {
  return txt.substr(0, txt.length - 1);
}
const snakeToCamel = (str) =>
  str
    .toLowerCase()
    .replace(/([-_][a-z])/g, (group) =>
      group.toUpperCase().replace("-", "").replace("_", "")
    );
function camelToSnake(text) {
  return text
    .split(/(?=[A-Z])/)
    .join("_")
    .toLowerCase();
}
